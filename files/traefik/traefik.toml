################################################################
#
# Configuration sample for Traefik v2
# For Traefik v1: https://github.com/containous/traefik/blob/v1.7/traefik.sample.toml
#
################################################################

################################################################
# Global configuration
################################################################
[global]
# 设置超时的时间（以秒为单位），在热更新期间给还在活动中的请求来完成当前任务的超时时间（默认为10秒）； 
graceTimeOut = 10
debug = false
checkNewVersion = false
# 后端节流持续时间：在应用新配置之前，提供者的2个事件之间的最短持续时间（以秒为单位，默认为2），可避免不必要的重新加载；
ProvidersThrottleDuration = "5"
# 为每个host控制最大空闲连接（keep-alive）。如果设置为0，那么将会使用Go语言基础库net/http中的DefaultMaxIdleConnsPerHost；
MaxIdleConnsPerHost = 200

[log]
# 设置日志存储路径
traefikLogsFile = "log/traefik.log"
accessLogsFile = "log/access.log"
format = "json"
# 设置日志级别，按照严重程度排序: "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "PANIC"；
logLevel = "ERROR"

[healthcheck]
# 设置运行状况检查间隔时间（默认为30秒）；
interval = "30s"

[respondingTimeouts]
# readTimeout是整个读取请求的最长持续时间，包括正文（默认为0秒，表示不超时）；
readTimeout = "5s"
# writeTimeout是超时写入响应之前的最大持续时间（默认为0秒，表示不超时）；
writeTimeout = "5s"
# idleTimeout是空闲（keep-alive）连接在关闭之前保持空闲的最长持续时间（默认为180秒）；
idleTimeout = "360s"

[forwardingTimeouts]
# 与后端服务器的建立连接之前的等待时间（默认为30秒）；
dialTimeout = "30s"
# 完全写入请求（包括其正文，如果有）之后等待服务器响应头的时间（默认为0，表示不超时）；
responseHeaderTimeout = "0s"

################################################################
# 入口配置
################################################################
[entryPoints]
    [entryPoints.web]
    address = ":80"
    [entryPoints.http.auth.basic]
    # 密码可以以MD5、SHA1或BCrypt方式加密，也可以使用htpasswd来生成这些用户名密码；
    users = ["admin:$apr1$j3Glg1oj$D5l278jRcBQF.zrzzJCIR0"]

